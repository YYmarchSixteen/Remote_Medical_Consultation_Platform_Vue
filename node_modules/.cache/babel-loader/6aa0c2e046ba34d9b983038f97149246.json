{"ast":null,"code":"import { get } from '@/utils/request';\nexport default {\n  data() {\n    return {\n      currentPage: 1,\n      // 默认页码为1\n      pagesize: 15,\n      // 默认一页显示 条\n      background: true,\n      // 分页栏背景色\n      list: []\n    };\n  },\n\n  mounted() {\n    this.getOrderDetail();\n  },\n\n  methods: {\n    getOrderDetail() {\n      get('http://localhost:8080/allOrderDetail').then(res => {\n        this.list = res.data.data;\n      });\n    },\n\n    handleSizeChange(size) {\n      this.pagesize = size;\n    },\n\n    handleCurrentChange(currentPage) {\n      this.currentPage = currentPage;\n    },\n\n    mergeRows({\n      row,\n      column,\n      rowIndex,\n      columnIndex\n    }) {\n      if (columnIndex === 0) {\n        // orderId 列\n        let prevRow = this.list[rowIndex - 1];\n\n        if (prevRow && prevRow.orderId === row.orderId) {\n          // 如果上一行的 orderId 和当前行相等，则不需要渲染当前单元格\n          return 0;\n        }\n\n        let rowspan = 1; // 计算当前单元格需要合并的行数\n\n        for (let i = rowIndex + 1; i < this.list.length; i++) {\n          if (this.list[i].orderId === row.orderId) {\n            rowspan++;\n          } else {\n            break;\n          }\n        }\n\n        return rowspan;\n      }\n    }\n\n  }\n};","map":{"version":3,"mappings":"AAqBA,SAASA,GAAT,QAAoB,iBAApB;AAEA,eAAe;AACbC,MAAI,GAAG;AACL,WAAO;AACLC,iBAAW,EAAE,CADR;AACW;AAChBC,cAAQ,EAAE,EAFL;AAES;AACdC,gBAAU,EAAE,IAHP;AAGa;AAClBC,UAAI,EAAE;AAJD,KAAP;AAMD,GARY;;AASbC,SAAO,GAAG;AACR,SAAKC,cAAL;AACD,GAXY;;AAYbC,SAAO,EAAE;AACPD,kBAAc,GAAG;AACfP,SAAG,CAAC,sCAAD,CAAH,CAA4CS,IAA5C,CAAkDC,GAAD,IAAS;AACxD,aAAKL,IAAL,GAAYK,GAAG,CAACT,IAAJ,CAASA,IAArB;AACD,OAFD;AAGD,KALM;;AAMPU,oBAAgB,CAACC,IAAD,EAAO;AACrB,WAAKT,QAAL,GAAgBS,IAAhB;AACD,KARM;;AASPC,uBAAmB,CAACX,WAAD,EAAc;AAC/B,WAAKA,WAAL,GAAmBA,WAAnB;AACD,KAXM;;AAYPY,aAAS,CAAC;AAAEC,SAAF;AAAOC,YAAP;AAAeC,cAAf;AAAyBC;AAAzB,KAAD,EAAyC;AAChD,UAAIA,WAAU,KAAM,CAApB,EAAuB;AAAE;AACvB,YAAIC,OAAM,GAAI,KAAKd,IAAL,CAAUY,QAAO,GAAI,CAArB,CAAd;;AACA,YAAIE,OAAM,IAAKA,OAAO,CAACC,OAAR,KAAoBL,GAAG,CAACK,OAAvC,EAAgD;AAAE;AAChD,iBAAO,CAAP;AACF;;AACA,YAAIC,OAAM,GAAI,CAAd,CALqB,CAKJ;;AACjB,aAAK,IAAIC,IAAIL,QAAO,GAAI,CAAxB,EAA2BK,IAAI,KAAKjB,IAAL,CAAUkB,MAAzC,EAAiDD,CAAC,EAAlD,EAAsD;AACpD,cAAI,KAAKjB,IAAL,CAAUiB,CAAV,EAAaF,OAAb,KAAyBL,GAAG,CAACK,OAAjC,EAA0C;AACxCC,mBAAO;AACT,WAFA,MAEO;AACL;AACF;AACF;;AACA,eAAOA,OAAP;AACF;AACD;;AA5BM;AAZI,CAAf","names":["get","data","currentPage","pagesize","background","list","mounted","getOrderDetail","methods","then","res","handleSizeChange","size","handleCurrentChange","mergeRows","row","column","rowIndex","columnIndex","prevRow","orderId","rowspan","i","length"],"sourceRoot":"","sources":["D:\\Dev\\Front\\finalProject\\src\\views\\Admin\\order.vue"],"sourcesContent":["<template>\r\n  <el-card class=\"box-card\">\r\n    <el-table :data=\"list.slice((currentPage - 1) * pagesize, currentPage * pagesize)\" style=\"width: 100%\">\r\n      <el-table-column prop=\"orderId\" label=\"ID\" width=\"300\" :span-method=\"mergeRows\" />\r\n      <el-table-column prop=\"medicineName\" label=\"物品明细\" width=\"300\" />\r\n      <el-table-column prop=\"count\" label=\"数量\" width=\"300\" />\r\n      <el-table-column prop=\"price\" label=\"单价\" width=\"300\" />\r\n    </el-table>\r\n    <el-pagination\r\n      v-model=\"currentPage\"\r\n      :page-sizes=\"[10]\"\r\n      :page-size=\"pagesize\"\r\n      :background=\"background\"\r\n      layout=\"total, sizes, prev, pager, next, jumper\"\r\n      :total=\"list.length\"\r\n      @size-change=\"handleSizeChange\"\r\n      @current-change=\"handleCurrentChange\"/>\r\n  </el-card>\r\n</template>\r\n\r\n<script>\r\nimport { get } from '@/utils/request'\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      currentPage: 1, // 默认页码为1\r\n      pagesize: 15, // 默认一页显示 条\r\n      background: true, // 分页栏背景色\r\n      list: [],\r\n    }\r\n  },\r\n  mounted() {\r\n    this.getOrderDetail()\r\n  },\r\n  methods: {\r\n    getOrderDetail() {\r\n      get('http://localhost:8080/allOrderDetail').then((res) => {\r\n        this.list = res.data.data\r\n      })\r\n    },\r\n    handleSizeChange(size) {\r\n      this.pagesize = size\r\n    },\r\n    handleCurrentChange(currentPage) {\r\n      this.currentPage = currentPage\r\n    },\r\n    mergeRows({ row, column, rowIndex, columnIndex }) {\r\n      if (columnIndex === 0) { // orderId 列\r\n        let prevRow = this.list[rowIndex - 1];\r\n        if (prevRow && prevRow.orderId === row.orderId) { // 如果上一行的 orderId 和当前行相等，则不需要渲染当前单元格\r\n          return 0;\r\n        }\r\n        let rowspan = 1; // 计算当前单元格需要合并的行数\r\n        for (let i = rowIndex + 1; i < this.list.length; i++) {\r\n          if (this.list[i].orderId === row.orderId) {\r\n            rowspan++;\r\n          } else {\r\n            break;\r\n          }\r\n        }\r\n        return rowspan;\r\n      }\r\n    },\r\n  },\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.box-card {\r\n  margin-top: 5px;\r\n  margin-left: 15px;\r\n  margin-right: 15px;\r\n  height: 95%;\r\n}\r\n</style>\r\n"]},"metadata":{},"sourceType":"module"}