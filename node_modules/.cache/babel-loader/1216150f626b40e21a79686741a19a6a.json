{"ast":null,"code":"import axios from 'axios';\nimport Header from '../userLayout/Header/header.vue';\nexport default {\n  components: {\n    Header\n  },\n\n  data() {\n    return {\n      doctorList: [],\n      currentDoctorId: null,\n      currentUsername: '',\n      currentChat: [],\n      newMessage: '',\n      cameraDialogVisible: false\n    };\n  },\n\n  mounted() {\n    this.fetchDoctorList();\n  },\n\n  methods: {\n    fetchDoctorList() {\n      axios.get(`http://localhost:8081/chat/userChatList?userId=1`).then(response => {\n        this.doctorList = response.data.data;\n\n        if (this.doctorList.length > 0) {\n          this.currentUsername = this.doctorList[0].username;\n          this.currentDoctorId = this.doctorList[0].doctorId;\n          this.fetchChatContent(this.currentDoctorId);\n        }\n      }).catch(error => {\n        console.error('Error fetching doctor list:', error);\n      });\n    },\n\n    fetchChatContent(doctorId) {\n      axios.get(`http://localhost:8081/chat/all?doctorId=${doctorId}&userId=4`).then(response => {\n        this.currentChat = response.data.data.map(message => {\n          const formattedTime = new Date(message.sendTime).toLocaleString();\n          return { ...message,\n            formattedTime\n          };\n        });\n      }).catch(error => {\n        console.error('Error fetching chat content:', error);\n      });\n    },\n\n    handleUserSelect(username) {\n      this.currentUsername = username;\n      const selectedUser = this.doctorList.find(doctor => doctor.username === username);\n\n      if (selectedUser) {\n        this.currentDoctorId = selectedUser.doctorId;\n        this.fetchChatContent(this.currentDoctorId);\n      }\n    },\n\n    sendMessage() {\n      if (this.newMessage.trim() !== '') {\n        const message = {\n          id: this.currentChat.length + 1,\n          message: this.newMessage.trim(),\n          sender: 'user',\n          formattedTime: new Date().toLocaleString()\n        };\n        this.currentChat.push(message);\n        this.newMessage = '';\n      }\n    }\n\n  }\n};","map":{"version":3,"mappings":"AAiDA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,iCAAnB;AAEA,eAAe;AACbC,YAAU,EAAE;AACVD;AADU,GADC;;AAIbE,MAAI,GAAG;AACL,WAAO;AACLC,gBAAU,EAAE,EADP;AAELC,qBAAe,EAAE,IAFZ;AAGLC,qBAAe,EAAE,EAHZ;AAILC,iBAAW,EAAE,EAJR;AAKLC,gBAAU,EAAE,EALP;AAMLC,yBAAmB,EAAE;AANhB,KAAP;AAQD,GAbY;;AAcbC,SAAO,GAAG;AACR,SAAKC,eAAL;AACD,GAhBY;;AAiBbC,SAAO,EAAE;AACPD,mBAAe,GAAG;AAChBX,WAAK,CAACa,GAAN,CAAW,kDAAX,EACGC,IADH,CACQC,QAAO,IAAK;AAChB,aAAKX,UAAL,GAAkBW,QAAQ,CAACZ,IAAT,CAAcA,IAAhC;;AACA,YAAI,KAAKC,UAAL,CAAgBY,MAAhB,GAAyB,CAA7B,EAAgC;AAC9B,eAAKV,eAAL,GAAuB,KAAKF,UAAL,CAAgB,CAAhB,EAAmBa,QAA1C;AACA,eAAKZ,eAAL,GAAuB,KAAKD,UAAL,CAAgB,CAAhB,EAAmBc,QAA1C;AACA,eAAKC,gBAAL,CAAsB,KAAKd,eAA3B;AACF;AACD,OARH,EASGe,KATH,CASSC,KAAI,IAAK;AACdC,eAAO,CAACD,KAAR,CAAc,6BAAd,EAA6CA,KAA7C;AACD,OAXH;AAYD,KAdM;;AAePF,oBAAgB,CAACD,QAAD,EAAW;AACzBlB,WAAK,CAACa,GAAN,CAAW,2CAA0CK,QAAS,WAA9D,EACGJ,IADH,CACQC,QAAO,IAAK;AAChB,aAAKR,WAAL,GAAmBQ,QAAQ,CAACZ,IAAT,CAAcA,IAAd,CAAmBoB,GAAnB,CAAuBC,OAAM,IAAK;AACnD,gBAAMC,aAAY,GAAI,IAAIC,IAAJ,CAASF,OAAO,CAACG,QAAjB,EAA2BC,cAA3B,EAAtB;AACA,iBAAO,EAAE,GAAGJ,OAAL;AAAcC;AAAd,WAAP;AACD,SAHkB,CAAnB;AAID,OANH,EAOGL,KAPH,CAOSC,KAAI,IAAK;AACdC,eAAO,CAACD,KAAR,CAAc,8BAAd,EAA8CA,KAA9C;AACD,OATH;AAUD,KA1BM;;AA2BPQ,oBAAgB,CAACZ,QAAD,EAAW;AACzB,WAAKX,eAAL,GAAuBW,QAAvB;AACA,YAAMa,YAAW,GAAI,KAAK1B,UAAL,CAAgB2B,IAAhB,CAAqBC,MAAK,IAAKA,MAAM,CAACf,QAAP,KAAoBA,QAAnD,CAArB;;AACA,UAAIa,YAAJ,EAAkB;AAChB,aAAKzB,eAAL,GAAuByB,YAAY,CAACZ,QAApC;AACA,aAAKC,gBAAL,CAAsB,KAAKd,eAA3B;AACF;AACD,KAlCM;;AAmCP4B,eAAW,GAAG;AACZ,UAAI,KAAKzB,UAAL,CAAgB0B,IAAhB,OAA2B,EAA/B,EAAmC;AACjC,cAAMV,OAAM,GAAI;AACdW,YAAE,EAAE,KAAK5B,WAAL,CAAiBS,MAAjB,GAA0B,CADhB;AAEdQ,iBAAO,EAAE,KAAKhB,UAAL,CAAgB0B,IAAhB,EAFK;AAGdE,gBAAM,EAAE,MAHM;AAIdX,uBAAa,EAAE,IAAIC,IAAJ,GAAWE,cAAX;AAJD,SAAhB;AAMA,aAAKrB,WAAL,CAAiB8B,IAAjB,CAAsBb,OAAtB;AACA,aAAKhB,UAAL,GAAkB,EAAlB;AACF;AACD;;AA9CM;AAjBI,CAAf","names":["axios","Header","components","data","doctorList","currentDoctorId","currentUsername","currentChat","newMessage","cameraDialogVisible","mounted","fetchDoctorList","methods","get","then","response","length","username","doctorId","fetchChatContent","catch","error","console","map","message","formattedTime","Date","sendTime","toLocaleString","handleUserSelect","selectedUser","find","doctor","sendMessage","trim","id","sender","push"],"sourceRoot":"","sources":["D:\\Dev\\Front\\Remote_Medical_Consultation_Platform_Vue\\src\\views\\User\\message.vue"],"sourcesContent":["<template>\r\n  <div class=\"header\">\r\n    <Header></Header>\r\n  </div>\r\n  <div class=\"body\">\r\n    <div class=\"chat-container\">\r\n      <!-- 用户列表 -->\r\n      <div class=\"user-list\">\r\n        <el-card class=\"user-card\">\r\n          <div id=\"header\" class=\"user-header\">消息列表</div>\r\n          <el-scrollbar wrap-class=\"user-scrollbar\">\r\n            <el-menu class=\"user-menu\" :default-active=\"currentDoctorId\" mode=\"vertical\">\r\n              <el-menu-item v-for=\"doctor in doctorList\" :key=\"doctor.doctorId\" :index=\"doctor.doctorId\"\r\n                            @click=\"handleUserSelect(doctor.username)\">\r\n                {{ doctor.username }}\r\n              </el-menu-item>\r\n            </el-menu>\r\n          </el-scrollbar>\r\n        </el-card>\r\n      </div>\r\n      <!-- 聊天内容 -->\r\n      <div class=\"chat-content\">\r\n        <el-card class=\"chat-card\">\r\n          <!-- 聊天头部 -->\r\n          <div id=\"header\" class=\"chat-header\">{{ currentUsername }}<br><br>\r\n          </div>\r\n          <el-scrollbar wrap-class=\"chat-scrollbar\" style=\"height: 80vh\">\r\n            <div class=\"chat-messages\">\r\n              <div v-for=\"message in currentChat\" :key=\"message.id\" class=\"chat-message\"\r\n                   :class=\"{ 'sent-message': message.sender === 'user', 'received-message': message.sender !== 'user' }\">\r\n                <div v-if=\"message.sender === 'user'\" class=\"user-message\">\r\n                  {{ message.message }}<br>{{ message.formattedTime }}\r\n                </div>\r\n                <div v-else class=\"doctor-message\">\r\n                  {{ message.message }}<br>{{ message.formattedTime }}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </el-scrollbar>\r\n          <!-- 输入框 -->\r\n          <el-input class=\"chat-input\" v-model=\"newMessage\" @keyup.enter=\"sendMessage\" placeholder=\"请输入消息\"\r\n                    clearable></el-input>\r\n        </el-card>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios'\r\nimport Header from '../userLayout/Header/header.vue'\r\n\r\nexport default {\r\n  components: {\r\n    Header\r\n  },\r\n  data() {\r\n    return {\r\n      doctorList: [],\r\n      currentDoctorId: null,\r\n      currentUsername: '',\r\n      currentChat: [],\r\n      newMessage: '',\r\n      cameraDialogVisible: false\r\n    }\r\n  },\r\n  mounted() {\r\n    this.fetchDoctorList()\r\n  },\r\n  methods: {\r\n    fetchDoctorList() {\r\n      axios.get(`http://localhost:8081/chat/userChatList?userId=1`)\r\n        .then(response => {\r\n          this.doctorList = response.data.data\r\n          if (this.doctorList.length > 0) {\r\n            this.currentUsername = this.doctorList[0].username\r\n            this.currentDoctorId = this.doctorList[0].doctorId\r\n            this.fetchChatContent(this.currentDoctorId)\r\n          }\r\n        })\r\n        .catch(error => {\r\n          console.error('Error fetching doctor list:', error)\r\n        })\r\n    },\r\n    fetchChatContent(doctorId) {\r\n      axios.get(`http://localhost:8081/chat/all?doctorId=${doctorId}&userId=4`)\r\n        .then(response => {\r\n          this.currentChat = response.data.data.map(message => {\r\n            const formattedTime = new Date(message.sendTime).toLocaleString()\r\n            return { ...message, formattedTime }\r\n          })\r\n        })\r\n        .catch(error => {\r\n          console.error('Error fetching chat content:', error)\r\n        })\r\n    },\r\n    handleUserSelect(username) {\r\n      this.currentUsername = username\r\n      const selectedUser = this.doctorList.find(doctor => doctor.username === username)\r\n      if (selectedUser) {\r\n        this.currentDoctorId = selectedUser.doctorId\r\n        this.fetchChatContent(this.currentDoctorId)\r\n      }\r\n    },\r\n    sendMessage() {\r\n      if (this.newMessage.trim() !== '') {\r\n        const message = {\r\n          id: this.currentChat.length + 1,\r\n          message: this.newMessage.trim(),\r\n          sender: 'user',\r\n          formattedTime: new Date().toLocaleString()\r\n        }\r\n        this.currentChat.push(message)\r\n        this.newMessage = ''\r\n      }\r\n    },\r\n  }\r\n\r\n}\r\n\r\n</script>\r\n\r\n<style scoped>\r\n.body {\r\n  margin-top: 20px;\r\n}\r\n.chat-container {\r\n  display: flex;\r\n  height: 100vh;\r\n}\r\n\r\n.user-list {\r\n  width: 250px;\r\n  flex-shrink: 0;\r\n  overflow: hidden;\r\n}\r\n\r\n.user-card {\r\n  height: 100%;\r\n}\r\n\r\n.user-header {\r\n  padding: 10px;\r\n}\r\n\r\n.user-menu {\r\n  height: 100%;\r\n}\r\n\r\n.chat-content {\r\n  flex-grow: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.chat-card {\r\n  height: 100%;\r\n}\r\n\r\n.chat-header {\r\n  padding: 10px;\r\n}\r\n\r\n.chat-messages {\r\n  padding: 10px;\r\n}\r\n\r\n.chat-message {\r\n  margin-bottom: 10px;\r\n  padding: 8px;\r\n  border-radius: 5px;\r\n}\r\n\r\n.sent-message {\r\n  background-color: #f0f0f0;\r\n}\r\n\r\n.chat-input {\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.received-message {\r\n  background-color: #f0f0f0;\r\n  text-align: left;\r\n}\r\n\r\n.sent-message {\r\n  background-color: #e3f2fd;\r\n  text-align: right;\r\n}\r\n\r\n.chat-message {\r\n  margin-bottom: 10px;\r\n  padding: 8px;\r\n  border-radius: 5px;\r\n  word-wrap: break-word;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module"}