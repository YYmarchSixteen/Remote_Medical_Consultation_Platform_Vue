{"ast":null,"code":"import axios from \"axios\"; //创建一个axios的对象\n\nconst instance = axios.create({\n  baseURL: 'http://localhost:8088/demo',\n  //会在发送请求的时候发送到url前面\n  timeout: 5000 //链接超时   \n\n}); // 请求拦截\n// 所有的网络请求都会先走这个方法，我们可以在他里面为请求添加一些自定制的内容\n\ninstance.interceptors.request.use(function (config) {\n  // console.group('全局请求拦截')\n  // console.log(config)\n  // console.groupEnd();\n  return config;\n}, function (err) {\n  return Promise.reject(err);\n}); // 响应拦截\n// 所有的网络请求返回数据后都都会执行此方法，可以根据服务器返回的状态码，做相应的数据\n\ninstance.interceptors.request.use(function (response) {\n  // console.group('全局响应拦截')\n  // console.log(response)\n  // console.groupEnd();\n  return response;\n}, function (err) {\n  return Promise.reject(err);\n});\nexport function get(url, params) {\n  return instance.get(url, {\n    params\n  });\n}\nexport function post(url, data) {\n  return instance.post(url, data, {\n    headers: {\n      'Content-Type': 'application/json; charset=utf-8'\n    }\n  });\n}\nexport function del(url) {\n  return instance.post(url);\n}\nexport function put(url, data) {\n  return instance.post(url, data);\n}","map":{"version":3,"sources":["D:/小学期vscode/demo01/src/utils/request.js"],"names":["axios","instance","create","baseURL","timeout","interceptors","request","use","config","err","Promise","reject","response","get","url","params","post","data","headers","del","put"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,MAAMC,QAAQ,GAAED,KAAK,CAACE,MAAN,CAAa;AACzBC,EAAAA,OAAO,EAAC,4BADiB;AACY;AACrCC,EAAAA,OAAO,EAAC,IAFiB,CAEZ;;AAFY,CAAb,CAAhB,C,CAIA;AACA;;AACAH,QAAQ,CAACI,YAAT,CAAsBC,OAAtB,CAA8BC,GAA9B,CACI,UAASC,MAAT,EAAgB;AACZ;AACA;AACA;AACA,SAAOA,MAAP;AACH,CANL,EAOI,UAASC,GAAT,EAAa;AACT,SAAOC,OAAO,CAACC,MAAR,CAAeF,GAAf,CAAP;AACH,CATL,E,CAYA;AACA;;AACAR,QAAQ,CAACI,YAAT,CAAsBC,OAAtB,CAA8BC,GAA9B,CACI,UAASK,QAAT,EAAkB;AACd;AACA;AACA;AACA,SAAOA,QAAP;AACH,CANL,EAOI,UAASH,GAAT,EAAa;AACT,SAAOC,OAAO,CAACC,MAAR,CAAeF,GAAf,CAAP;AACH,CATL;AAYA,OAAO,SAASI,GAAT,CAAaC,GAAb,EAAiBC,MAAjB,EAAwB;AACzB,SAAOd,QAAQ,CAACY,GAAT,CAAaC,GAAb,EAAiB;AACpBC,IAAAA;AADoB,GAAjB,CAAP;AAGL;AAED,OAAO,SAASC,IAAT,CAAcF,GAAd,EAAkBG,IAAlB,EAAuB;AAC1B,SAAOhB,QAAQ,CAACe,IAAT,CAAcF,GAAd,EACHG,IADG,EACE;AACDC,IAAAA,OAAO,EAAE;AAAC,sBAAgB;AAAjB;AADR,GADF,CAAP;AAKH;AAED,OAAO,SAASC,GAAT,CAAaL,GAAb,EAAiB;AACpB,SAAOb,QAAQ,CAACe,IAAT,CAAcF,GAAd,CAAP;AACH;AAED,OAAO,SAASM,GAAT,CAAaN,GAAb,EAAiBG,IAAjB,EAAsB;AACzB,SAAOhB,QAAQ,CAACe,IAAT,CAAcF,GAAd,EAAkBG,IAAlB,CAAP;AACH","sourcesContent":["import axios from \"axios\";\r\n\r\n//创建一个axios的对象\r\nconst instance =axios.create({\r\n    baseURL:'http://localhost:8088/demo',//会在发送请求的时候发送到url前面\r\n    timeout:5000,//链接超时   \r\n})\r\n// 请求拦截\r\n// 所有的网络请求都会先走这个方法，我们可以在他里面为请求添加一些自定制的内容\r\ninstance.interceptors.request.use(\r\n    function(config){\r\n        // console.group('全局请求拦截')\r\n        // console.log(config)\r\n        // console.groupEnd();\r\n        return config;      \r\n    },\r\n    function(err){\r\n        return Promise.reject(err);\r\n    }\r\n);\r\n\r\n// 响应拦截\r\n// 所有的网络请求返回数据后都都会执行此方法，可以根据服务器返回的状态码，做相应的数据\r\ninstance.interceptors.request.use(\r\n    function(response){\r\n        // console.group('全局响应拦截')\r\n        // console.log(response)\r\n        // console.groupEnd();\r\n        return response;\r\n    },\r\n    function(err){\r\n        return Promise.reject(err);\r\n    }\r\n);\r\n\r\nexport function get(url,params){\r\n      return instance.get(url,{\r\n          params\r\n      });\r\n}\r\n\r\nexport function post(url,data){\r\n    return instance.post(url,\r\n        data,{\r\n            headers: {'Content-Type': 'application/json; charset=utf-8'},\r\n          }\r\n    );\r\n}\r\n\r\nexport function del(url){\r\n    return instance.post(url);\r\n}\r\n\r\nexport function put(url,data){\r\n    return instance.post(url,data);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}