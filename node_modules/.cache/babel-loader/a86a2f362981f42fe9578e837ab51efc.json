{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"camera_outer\"\n};\nconst _hoisted_2 = [\"width\", \"height\"];\nconst _hoisted_3 = [\"width\", \"height\"];\nconst _hoisted_4 = {\n  key: 0,\n  class: \"img_bg_camera\"\n};\n\nconst _hoisted_5 = /*#__PURE__*/_createElementVNode(\"p\", null, \"效果预览\", -1\n/* HOISTED */\n);\n\nconst _hoisted_6 = [\"src\"];\nconst _hoisted_7 = {\n  class: \"button\"\n};\n\nconst _hoisted_8 = /*#__PURE__*/_createTextVNode(\"打开摄像头\");\n\nconst _hoisted_9 = /*#__PURE__*/_createTextVNode(\"关闭摄像头\");\n\nconst _hoisted_10 = /*#__PURE__*/_createTextVNode(\"拍照\");\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_button = _resolveComponent(\"el-button\");\n\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"video\", {\n    id: \"videoCamera\",\n    width: $data.videoWidth,\n    height: $data.videoHeight,\n    autoplay: \"\"\n  }, null, 8\n  /* PROPS */\n  , _hoisted_2), _createElementVNode(\"canvas\", {\n    style: {\n      \"display\": \"none\"\n    },\n    id: \"canvasCamera\",\n    width: $data.videoWidth,\n    height: $data.videoHeight\n  }, null, 8\n  /* PROPS */\n  , _hoisted_3), $data.imgSrc ? (_openBlock(), _createElementBlock(\"div\", _hoisted_4, [_hoisted_5, _createElementVNode(\"img\", {\n    src: $data.imgSrc,\n    alt: \"\",\n    class: \"tx_img\"\n  }, null, 8\n  /* PROPS */\n  , _hoisted_6)])) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"div\", _hoisted_7, [_createVNode(_component_el_button, {\n    onClick: _cache[0] || (_cache[0] = $event => $options.getCompetence()),\n    type: \"primary\"\n  }, {\n    default: _withCtx(() => [_hoisted_8]),\n    _: 1\n    /* STABLE */\n\n  }), _createVNode(_component_el_button, {\n    onClick: _cache[1] || (_cache[1] = $event => $options.stopNavigator()),\n    type: \"warning\"\n  }, {\n    default: _withCtx(() => [_hoisted_9]),\n    _: 1\n    /* STABLE */\n\n  }), _createVNode(_component_el_button, {\n    onClick: _cache[2] || (_cache[2] = $event => $options.setImage()),\n    type: \"success\"\n  }, {\n    default: _withCtx(() => [_hoisted_10]),\n    _: 1\n    /* STABLE */\n\n  })])]);\n}","map":{"version":3,"mappings":";;AAEOA,OAAK,EAAC;;;;;;AAGUA,OAAK,EAAC;;;gCACvBC,oBAAW,GAAX,EAAW,IAAX,EAAG,MAAH,EAAO;AAAA;AAAP;;;;AAGGD,OAAK,EAAC;;;iDAC0C;;iDACA;;kDACL;;;;;uBAVlDE,oBAYM,KAZN,cAYM,CAXJD,oBAAmF,OAAnF,EAAmF;AAA5EE,MAAE,EAAC,aAAyE;AAA1DC,SAAK,EAAEC,gBAAmD;AAAtCC,UAAM,EAAED,iBAA8B;AAAjBE,YAAQ,EAAR;AAAiB,GAAnF;;AAAA,eAWI,EAVJN,oBAAmG,QAAnG,EAAmG;AAA3FO,SAAqB,EAArB;AAAA;AAAA,KAA2F;AAArEL,MAAE,EAAC,cAAkE;AAAlDC,SAAK,EAAEC,gBAA2C;AAA9BC,UAAM,EAAED;AAAsB,GAAnG;;AAAA,eAUI,EATOA,8BAAXH,oBAGM,KAHN,cAGM,CAFJO,UAEI,EADJR,oBAAwC,KAAxC,EAAwC;AAAlCS,OAAG,EAAEL,YAA6B;AAArBM,OAAG,EAAH,EAAqB;AAAjBX,SAAK,EAAC;AAAW,GAAxC;;AAAA,eACI,CAHN,sCASI,EALJC,oBAIM,KAJN,cAIM,CAHJW,aAAoEC,oBAApE,EAAoE;AAAxDC,WAAK,sCAAEC,wBAAF,CAAmD;AAAhCC,QAAI,EAAC;AAA2B,GAApE;sBAAmD,MAAK;;;;GAAxD,CAGI,EAFJJ,aAAoEC,oBAApE,EAAoE;AAAxDC,WAAK,sCAAEC,wBAAF,CAAmD;AAAhCC,QAAI,EAAC;AAA2B,GAApE;sBAAmD,MAAK;;;;GAAxD,CAEI,EADJJ,aAA4DC,oBAA5D,EAA4D;AAAhDC,WAAK,sCAAEC,mBAAF,CAA2C;AAA7BC,QAAI,EAAC;AAAwB,GAA5D;sBAA8C,MAAE;;;;GAAhD,CACI,CAJN,CAKI,CAZN","names":["class","_createElementVNode","_createElementBlock","id","width","$data","height","autoplay","style","_hoisted_5","src","alt","_createVNode","_component_el_button","onClick","$options","type"],"sourceRoot":"","sources":["D:\\Dev\\Front\\Remote_Medical_Consultation_Platform_Vue\\src\\views\\Doctor\\userTest.vue"],"sourcesContent":["\r\n<template>\r\n  <div class=\"camera_outer\">\r\n    <video id=\"videoCamera\" :width=\"videoWidth\" :height=\"videoHeight\" autoplay></video>\r\n    <canvas style=\"display: none\" id=\"canvasCamera\" :width=\"videoWidth\" :height=\"videoHeight\"></canvas>\r\n    <div v-if=\"imgSrc\" class=\"img_bg_camera\">\r\n      <p>效果预览</p>\r\n      <img :src=\"imgSrc\" alt class=\"tx_img\" />\r\n    </div>\r\n    <div class=\"button\">\r\n      <el-button @click=\"getCompetence()\" type=\"primary\">打开摄像头</el-button>\r\n      <el-button @click=\"stopNavigator()\" type=\"warning\">关闭摄像头</el-button>\r\n      <el-button @click=\"setImage()\" type=\"success\">拍照</el-button>\r\n    </div>\r\n  </div>\r\n</template>\r\n<script>\r\nimport { post } from '@/utils/request'\r\nexport default {\r\n  data() {\r\n    return {\r\n      videoWidth: 250,\r\n      videoHeight: 350,\r\n      imgSrc: \"\",\r\n      thisCancas: null,\r\n      thisContext: null,\r\n      thisVideo: null,\r\n      openVideo: false,\r\n    };\r\n  },\r\n  mounted() {\r\n    this.getCompetence(); //进入页面就调用摄像头\r\n  },\r\n  methods: {\r\n    // 调用权限（打开摄像头功能）\r\n    getCompetence() {\r\n      var _this = this;\r\n      _this.thisCancas = document.getElementById(\"canvasCamera\");\r\n      _this.thisContext = this.thisCancas.getContext(\"2d\");\r\n      _this.thisVideo = document.getElementById(\"videoCamera\");\r\n      _this.thisVideo.style.display = \"block\";\r\n      // 获取媒体属性，旧版本浏览器可能不支持mediaDevices，我们首先设置一个空对象\r\n      if (navigator.mediaDevices === undefined) {\r\n        navigator.mediaDevices = {};\r\n      }\r\n      // 一些浏览器实现了部分mediaDevices，我们不能只分配一个对象\r\n      // 使用getUserMedia，因为它会覆盖现有的属性。\r\n      // 这里，如果缺少getUserMedia属性，就添加它。\r\n      if (navigator.mediaDevices.getUserMedia === undefined) {\r\n        navigator.mediaDevices.getUserMedia = function (constraints) {\r\n          // 首先获取现存的getUserMedia(如果存在)\r\n          var getUserMedia =\r\n            navigator.webkitGetUserMedia ||\r\n            navigator.mozGetUserMedia ||\r\n            navigator.getUserMedia;\r\n          // 有些浏览器不支持，会返回错误信息\r\n          // 保持接口一致\r\n          if (!getUserMedia) {\r\n            //不存在则报错\r\n            return Promise.reject(\r\n              new Error(\"getUserMedia is not implemented in this browser\")\r\n            );\r\n          }\r\n          // 否则，使用Promise将调用包装到旧的navigator.getUserMedia\r\n          return new Promise(function (resolve, reject) {\r\n            getUserMedia.call(navigator, constraints, resolve, reject);\r\n          });\r\n        };\r\n      }\r\n      var constraints = {\r\n        audio: false,\r\n        video: {\r\n          width: this.videoWidth,\r\n          height: this.videoHeight,\r\n          transform: \"scaleX(-1)\",\r\n        },\r\n      };\r\n      navigator.mediaDevices\r\n        .getUserMedia(constraints)\r\n        .then(function (stream) {\r\n          // 旧的浏览器可能没有srcObject\r\n          if (\"srcObject\" in _this.thisVideo) {\r\n            _this.thisVideo.srcObject = stream;\r\n          } else {\r\n            // 避免在新的浏览器中使用它，因为它正在被弃用。\r\n            _this.thisVideo.src = window.URL.createObjectURL(stream);\r\n          }\r\n          _this.thisVideo.onloadedmetadata = function (e) {\r\n            _this.thisVideo.play();\r\n          };\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n    },\r\n    //  绘制图片（拍照功能）\r\n    setImage() {\r\n      var _this = this;\r\n      // canvas画图\r\n      _this.thisContext.drawImage(\r\n        _this.thisVideo,\r\n        0,\r\n        0,\r\n        _this.videoWidth,\r\n        _this.videoHeight\r\n      );\r\n      // 获取图片base64链接\r\n      var image = this.thisCancas.toDataURL(\"image/jpg\");\r\n      // post(\"http://127.0.0.1:8000/getpic/\",{ image }).then((res) =>{\r\n      //     console.log(res)\r\n      // })\r\n      _this.imgSrc = image; //赋值并预览图片\r\n      var file = this.dataURLtoFile(image)\r\n      console.log(file)\r\n      // post(\"http://127.0.0.1:8000/getpic/\").then((res) => {\r\n      //     console.log(res)\r\n      // })\r\n      var data = new FormData();//重点在这里 如果使用 var data = {}; data.inputfile=... 这样的方式不能正常上传\r\n      // 将需要添加的参数添加进表单中\r\n      data.append(\"file\", file)//获取需要上传的文件\r\n      console.log(data)\r\n      let headers = { headers: { \"Content-Type\": \"image/jpeg\" } }//设置上传文件格式，为指定传输数据为二进制类型\r\n      post('http://127.0.0.1:8000/getpic/', data, headers)\r\n        .then(res => {\r\n          console.log()\r\n          if (res.data.level > 0.6) {\r\n            this.$message({\r\n              message: '成功' + '置信度为' + res.data.level,\r\n              type: 'success'\r\n            });\r\n          } else {\r\n            this.$message.error('失败');\r\n          }\r\n        })\r\n        .catch(err => {\r\n          console.log('上传失败', err)\r\n        })\r\n    },\r\n    // 关闭摄像头\r\n    stopNavigator() {\r\n      this.thisVideo.srcObject.getTracks()[0].stop();\r\n    },\r\n\r\n    // base64转文件，此处没用到\r\n    dataURLtoFile(dataurl, filename) {\r\n      // var arr = dataurl.split(\",\");\r\n      // var mime = arr[0].match(/:(.*?);/)[1];\r\n      // var bstr = atob(arr[1]);\r\n      // var n = bstr.length;\r\n      // var u8arr = new Uint8Array(n);\r\n      // while (n--) {\r\n      //     u8arr[n] = bstr.charCodeAt(n);\r\n      // }\r\n      // return new File([u8arr], filename, { type: mime });\r\n      var arr = dataurl.split(','),\r\n        mime = arr[0].match(/:(.*?);/)[1],\r\n        bstr = atob(arr[1]), n = bstr.length,\r\n        u8arr = new Uint8Array(n);\r\n      while (n--) {\r\n        u8arr[n] = bstr.charCodeAt(n)\r\n      }\r\n      return new Blob([u8arr], { type: mime })\r\n    },\r\n  },\r\n};\r\n</script>\r\n<style scoped>\r\n</style>"]},"metadata":{},"sourceType":"module"}