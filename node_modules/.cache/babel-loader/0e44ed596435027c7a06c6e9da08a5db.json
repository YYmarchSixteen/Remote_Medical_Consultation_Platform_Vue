{"ast":null,"code":"import { mergeProps as _mergeProps, createVNode as _createVNode } from \"vue\";\nimport { watch, onMounted, onUnmounted, defineComponent } from \"vue\";\nimport { pick, isDef, unknownProp, numericProp, makeStringProp, makeNumberProp, createNamespace } from \"../utils\";\nimport { lockClick } from \"./lock-click\";\nimport { Icon } from \"../icon\";\nimport { Popup } from \"../popup\";\nimport { Loading } from \"../loading\";\nconst [name, bem] = createNamespace(\"toast\");\nconst popupInheritProps = [\"show\", \"overlay\", \"transition\", \"overlayClass\", \"overlayStyle\", \"closeOnClickOverlay\"];\nconst toastProps = {\n  icon: String,\n  show: Boolean,\n  type: makeStringProp(\"text\"),\n  overlay: Boolean,\n  message: numericProp,\n  iconSize: numericProp,\n  duration: makeNumberProp(2e3),\n  position: makeStringProp(\"middle\"),\n  className: unknownProp,\n  iconPrefix: String,\n  transition: makeStringProp(\"van-fade\"),\n  loadingType: String,\n  forbidClick: Boolean,\n  overlayClass: unknownProp,\n  overlayStyle: Object,\n  closeOnClick: Boolean,\n  closeOnClickOverlay: Boolean\n};\nvar stdin_default = defineComponent({\n  name,\n  props: toastProps,\n  emits: [\"update:show\"],\n\n  setup(props, {\n    emit\n  }) {\n    let timer;\n    let clickable = false;\n\n    const toggleClickable = () => {\n      const newValue = props.show && props.forbidClick;\n\n      if (clickable !== newValue) {\n        clickable = newValue;\n        lockClick(clickable);\n      }\n    };\n\n    const updateShow = show => emit(\"update:show\", show);\n\n    const onClick = () => {\n      if (props.closeOnClick) {\n        updateShow(false);\n      }\n    };\n\n    const clearTimer = () => clearTimeout(timer);\n\n    const renderIcon = () => {\n      const {\n        icon,\n        type,\n        iconSize,\n        iconPrefix,\n        loadingType\n      } = props;\n      const hasIcon = icon || type === \"success\" || type === \"fail\";\n\n      if (hasIcon) {\n        return _createVNode(Icon, {\n          \"name\": icon || type,\n          \"size\": iconSize,\n          \"class\": bem(\"icon\"),\n          \"classPrefix\": iconPrefix\n        }, null);\n      }\n\n      if (type === \"loading\") {\n        return _createVNode(Loading, {\n          \"class\": bem(\"loading\"),\n          \"size\": iconSize,\n          \"type\": loadingType\n        }, null);\n      }\n    };\n\n    const renderMessage = () => {\n      const {\n        type,\n        message\n      } = props;\n\n      if (isDef(message) && message !== \"\") {\n        return type === \"html\" ? _createVNode(\"div\", {\n          \"class\": bem(\"text\"),\n          \"innerHTML\": String(message)\n        }, null) : _createVNode(\"div\", {\n          \"class\": bem(\"text\")\n        }, [message]);\n      }\n    };\n\n    watch(() => [props.show, props.forbidClick], toggleClickable);\n    watch(() => [props.show, props.type, props.message, props.duration], () => {\n      clearTimer();\n\n      if (props.show && props.duration > 0) {\n        timer = setTimeout(() => {\n          updateShow(false);\n        }, props.duration);\n      }\n    });\n    onMounted(toggleClickable);\n    onUnmounted(toggleClickable);\n    return () => _createVNode(Popup, _mergeProps({\n      \"class\": [bem([props.position, {\n        [props.type]: !props.icon\n      }]), props.className],\n      \"lockScroll\": false,\n      \"onClick\": onClick,\n      \"onClosed\": clearTimer,\n      \"onUpdate:show\": updateShow\n    }, pick(props, popupInheritProps)), {\n      default: () => [renderIcon(), renderMessage()]\n    });\n  }\n\n});\nexport { stdin_default as default };","map":{"version":3,"sources":["D:/Dev/Front/Remote_Medical_Consultation_Platform_Vue/node_modules/vant/es/toast/Toast.js"],"names":["mergeProps","_mergeProps","createVNode","_createVNode","watch","onMounted","onUnmounted","defineComponent","pick","isDef","unknownProp","numericProp","makeStringProp","makeNumberProp","createNamespace","lockClick","Icon","Popup","Loading","name","bem","popupInheritProps","toastProps","icon","String","show","Boolean","type","overlay","message","iconSize","duration","position","className","iconPrefix","transition","loadingType","forbidClick","overlayClass","overlayStyle","Object","closeOnClick","closeOnClickOverlay","stdin_default","props","emits","setup","emit","timer","clickable","toggleClickable","newValue","updateShow","onClick","clearTimer","clearTimeout","renderIcon","hasIcon","renderMessage","setTimeout","default"],"mappings":"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","sourcesContent":["import { mergeProps as _mergeProps, createVNode as _createVNode } from \"vue\";\nimport { watch, onMounted, onUnmounted, defineComponent } from \"vue\";\nimport { pick, isDef, unknownProp, numericProp, makeStringProp, makeNumberProp, createNamespace } from \"../utils\";\nimport { lockClick } from \"./lock-click\";\nimport { Icon } from \"../icon\";\nimport { Popup } from \"../popup\";\nimport { Loading } from \"../loading\";\nconst [name, bem] = createNamespace(\"toast\");\nconst popupInheritProps = [\"show\", \"overlay\", \"transition\", \"overlayClass\", \"overlayStyle\", \"closeOnClickOverlay\"];\nconst toastProps = {\n  icon: String,\n  show: Boolean,\n  type: makeStringProp(\"text\"),\n  overlay: Boolean,\n  message: numericProp,\n  iconSize: numericProp,\n  duration: makeNumberProp(2e3),\n  position: makeStringProp(\"middle\"),\n  className: unknownProp,\n  iconPrefix: String,\n  transition: makeStringProp(\"van-fade\"),\n  loadingType: String,\n  forbidClick: Boolean,\n  overlayClass: unknownProp,\n  overlayStyle: Object,\n  closeOnClick: Boolean,\n  closeOnClickOverlay: Boolean\n};\nvar stdin_default = defineComponent({\n  name,\n  props: toastProps,\n  emits: [\"update:show\"],\n  setup(props, {\n    emit\n  }) {\n    let timer;\n    let clickable = false;\n    const toggleClickable = () => {\n      const newValue = props.show && props.forbidClick;\n      if (clickable !== newValue) {\n        clickable = newValue;\n        lockClick(clickable);\n      }\n    };\n    const updateShow = (show) => emit(\"update:show\", show);\n    const onClick = () => {\n      if (props.closeOnClick) {\n        updateShow(false);\n      }\n    };\n    const clearTimer = () => clearTimeout(timer);\n    const renderIcon = () => {\n      const {\n        icon,\n        type,\n        iconSize,\n        iconPrefix,\n        loadingType\n      } = props;\n      const hasIcon = icon || type === \"success\" || type === \"fail\";\n      if (hasIcon) {\n        return _createVNode(Icon, {\n          \"name\": icon || type,\n          \"size\": iconSize,\n          \"class\": bem(\"icon\"),\n          \"classPrefix\": iconPrefix\n        }, null);\n      }\n      if (type === \"loading\") {\n        return _createVNode(Loading, {\n          \"class\": bem(\"loading\"),\n          \"size\": iconSize,\n          \"type\": loadingType\n        }, null);\n      }\n    };\n    const renderMessage = () => {\n      const {\n        type,\n        message\n      } = props;\n      if (isDef(message) && message !== \"\") {\n        return type === \"html\" ? _createVNode(\"div\", {\n          \"class\": bem(\"text\"),\n          \"innerHTML\": String(message)\n        }, null) : _createVNode(\"div\", {\n          \"class\": bem(\"text\")\n        }, [message]);\n      }\n    };\n    watch(() => [props.show, props.forbidClick], toggleClickable);\n    watch(() => [props.show, props.type, props.message, props.duration], () => {\n      clearTimer();\n      if (props.show && props.duration > 0) {\n        timer = setTimeout(() => {\n          updateShow(false);\n        }, props.duration);\n      }\n    });\n    onMounted(toggleClickable);\n    onUnmounted(toggleClickable);\n    return () => _createVNode(Popup, _mergeProps({\n      \"class\": [bem([props.position, {\n        [props.type]: !props.icon\n      }]), props.className],\n      \"lockScroll\": false,\n      \"onClick\": onClick,\n      \"onClosed\": clearTimer,\n      \"onUpdate:show\": updateShow\n    }, pick(props, popupInheritProps)), {\n      default: () => [renderIcon(), renderMessage()]\n    });\n  }\n});\nexport {\n  stdin_default as default\n};\n"]},"metadata":{},"sourceType":"module"}